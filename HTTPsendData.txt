import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;


class Album{
  final int id;
  final String title;

  const Album({required this.id, required this.title});

  factory Album.fromJson(Map<String, dynamic> json){
    return Album(id: json['id'], title: json['title']);
  }
}

void main(){
  runApp(const MyApp());
}

Future<Album> createAlbun(String title) async{
final response  = await http.post(
  Uri.parse('http://jsonplaceholder.typicode.com.albums'),
  headers: <String,String>{
    'content-Type': 'application/json; charset=UTF-8'},
    body: jsonEncode(<String,String>{
      'title': title
    }
));
if (response.statusCode == 201){
  return Album.fromJson(jsonDecode(response.body));
}else{ 
  throw Exception('Failed to Load Albtum!');
}

}

class MyApp extends StatefulWidget{
  const MyApp({Key? key}): super (key: key);

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp>{
final TextEditingController _controller = TextEditingController();
Future<Album>? _futureAlbum;

@override
Widget build (BuildContext context){
  return MaterialApp(title: 'Demo',
  theme: ThemeData(primarySwatch: Colors.deepOrange),
  home: Scaffold(
  appBar: AppBar(title: const Text('Send Data')),
  body:  Container(alignment: Alignment.center,
  padding: const EdgeInsets.all(8.0),
  child: (_futureAlbum == null) ? buildColumn() : buildFutureBuilder(),   
  ),
  ) ,
  );
}
 Column buildColumn(){
  return Column(
    mainAxisAlignment:  MainAxisAlignment.center,
    children: <Widget>[
      TextField(controller: _controller,
      decoration: const InputDecoration(hintText: 'Album Title'),
      ),
    ElevatedButton(onPressed: (){
      setState(() {
        _futureAlbum = createAlbun(_controller.text);
      });
    }, child: const Text('Submit'))
    ],
  );
 }
 
FutureBuilder<Album> buildFutureBuilder(){
  return FutureBuilder<Album>(
    future: _futureAlbum,
    builder: (context,snapshot){
      if (snapshot.hasData){
        return Text(snapshot.data!.title);
      }else if( snapshot.hasError){
        return Text("${ snapshot.error}");
      }
      return const CircularProgressIndicator();
    }
    );
}


}


